{"ast":null,"code":"var _jsxFileName = \"F:\\\\PAF_SL\\\\skillSharingAndLearningPlatform\\\\frontend\\\\src\\\\components\\\\notifications\\\\NotificationList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport NotificationItem from './NotificationItem';\nimport notificationService from '../../services/notificationService';\nimport './NotificationList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationList = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchNotifications();\n  }, []);\n  const fetchNotifications = async () => {\n    try {\n      setLoading(true);\n      const response = await notificationService.getUserNotifications();\n      setNotifications(response.data);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      setError('Failed to load notifications. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleMarkAllAsRead = async () => {\n    try {\n      await notificationService.markAllAsRead();\n      setNotifications(prevNotifications => prevNotifications.map(notification => ({\n        ...notification,\n        read: true\n      })));\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n    }\n  };\n  const handleNotificationRead = async notificationId => {\n    try {\n      await notificationService.markAsRead(notificationId);\n      setNotifications(prevNotifications => prevNotifications.map(notification => notification.id === notificationId ? {\n        ...notification,\n        read: true\n      } : notification));\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n  const unreadCount = notifications.filter(notification => !notification.read).length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Notifications \", unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"unread-badge\",\n          children: unreadCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mark-all-read\",\n        onClick: handleMarkAllAsRead,\n        children: \"Mark all as read\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading notifications...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this) : notifications.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty-message\",\n      children: \"You have no notifications.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-list\",\n      children: notifications.map(notification => /*#__PURE__*/_jsxDEV(NotificationItem, {\n        notification: notification,\n        onMarkAsRead: handleNotificationRead\n      }, notification.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationList, \"vlcruhFCB/K2MMjBmH2xNXCarGY=\");\n_c = NotificationList;\nexport default NotificationList;\nvar _c;\n$RefreshReg$(_c, \"NotificationList\");","map":{"version":3,"names":["React","useState","useEffect","NotificationItem","notificationService","jsxDEV","_jsxDEV","NotificationList","_s","notifications","setNotifications","loading","setLoading","error","setError","fetchNotifications","response","getUserNotifications","data","console","handleMarkAllAsRead","markAllAsRead","prevNotifications","map","notification","read","handleNotificationRead","notificationId","markAsRead","id","unreadCount","filter","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onMarkAsRead","_c","$RefreshReg$"],"sources":["F:/PAF_SL/skillSharingAndLearningPlatform/frontend/src/components/notifications/NotificationList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport NotificationItem from './NotificationItem';\r\nimport notificationService from '../../services/notificationService';\r\nimport './NotificationList.css';\r\n\r\nconst NotificationList = () => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchNotifications();\r\n  }, []);\r\n\r\n  const fetchNotifications = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await notificationService.getUserNotifications();\r\n      setNotifications(response.data);\r\n      setError(null);\r\n    } catch (error) {\r\n      console.error('Error fetching notifications:', error);\r\n      setError('Failed to load notifications. Please try again later.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleMarkAllAsRead = async () => {\r\n    try {\r\n      await notificationService.markAllAsRead();\r\n      setNotifications(prevNotifications => \r\n        prevNotifications.map(notification => ({\r\n          ...notification,\r\n          read: true\r\n        }))\r\n      );\r\n    } catch (error) {\r\n      console.error('Error marking all notifications as read:', error);\r\n    }\r\n  };\r\n\r\n  const handleNotificationRead = async (notificationId) => {\r\n    try {\r\n      await notificationService.markAsRead(notificationId);\r\n      setNotifications(prevNotifications => \r\n        prevNotifications.map(notification => \r\n          notification.id === notificationId \r\n            ? { ...notification, read: true } \r\n            : notification\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error('Error marking notification as read:', error);\r\n    }\r\n  };\r\n\r\n  const unreadCount = notifications.filter(notification => !notification.read).length;\r\n\r\n  return (\r\n    <div className=\"notification-container\">\r\n      <div className=\"notification-header\">\r\n        <h2>Notifications {unreadCount > 0 && <span className=\"unread-badge\">{unreadCount}</span>}</h2>\r\n        {unreadCount > 0 && (\r\n          <button className=\"mark-all-read\" onClick={handleMarkAllAsRead}>\r\n            Mark all as read\r\n          </button>\r\n        )}\r\n      </div>\r\n      \r\n      {loading ? (\r\n        <div className=\"loading\">Loading notifications...</div>\r\n      ) : error ? (\r\n        <div className=\"error-message\">{error}</div>\r\n      ) : notifications.length === 0 ? (\r\n        <div className=\"empty-message\">You have no notifications.</div>\r\n      ) : (\r\n        <div className=\"notification-list\">\r\n          {notifications.map(notification => (\r\n            <NotificationItem \r\n              key={notification.id} \r\n              notification={notification}\r\n              onMarkAsRead={handleNotificationRead}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotificationList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
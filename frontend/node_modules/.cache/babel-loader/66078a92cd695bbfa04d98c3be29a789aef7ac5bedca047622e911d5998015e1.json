{"ast":null,"code":"var _jsxFileName = \"D:\\\\PAF_SL\\\\skillSharingAndLearningPlatform\\\\frontend\\\\src\\\\components\\\\comments\\\\CommentList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CommentItem from './CommentItem';\nimport CommentForm from './CommentForm';\nimport commentService from '../../services/commentService';\nimport './CommentList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentList = ({\n  postId\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [refreshKey, setRefreshKey] = useState(0);\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await commentService.getCommentsByPostId(postId);\n        // Organize comments into a nested structure\n        const rootComments = response.data.filter(comment => !comment.parentId);\n        const commentMap = response.data.reduce((map, comment) => {\n          map[comment.id] = {\n            ...comment,\n            replies: []\n          };\n          return map;\n        }, {});\n        response.data.forEach(comment => {\n          if (comment.parentId) {\n            commentMap[comment.parentId].replies.push(commentMap[comment.id]);\n          }\n        });\n        setComments(rootComments.map(comment => commentMap[comment.id]));\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    };\n    fetchComments();\n  }, [postId, refreshKey]);\n  const refreshComments = () => {\n    setRefreshKey(prevKey => prevKey + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n      postId: postId,\n      onCommentAdded: refreshComments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-container\",\n      children: comments.length > 0 ? comments.map(comment => /*#__PURE__*/_jsxDEV(CommentItem, {\n        comment: comment,\n        postId: postId,\n        onCommentUpdated: refreshComments\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-comments\",\n        children: \"No comments yet. Be the first to comment!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentList, \"2hWVmAG1FT72TKLgdK3cTG6IZxg=\");\n_c = CommentList;\nexport default CommentList;\nvar _c;\n$RefreshReg$(_c, \"CommentList\");","map":{"version":3,"names":["React","useState","useEffect","CommentItem","CommentForm","commentService","jsxDEV","_jsxDEV","CommentList","postId","_s","comments","setComments","refreshKey","setRefreshKey","fetchComments","response","getCommentsByPostId","rootComments","data","filter","comment","parentId","commentMap","reduce","map","id","replies","forEach","push","error","console","refreshComments","prevKey","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCommentAdded","length","onCommentUpdated","_c","$RefreshReg$"],"sources":["D:/PAF_SL/skillSharingAndLearningPlatform/frontend/src/components/comments/CommentList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport CommentItem from './CommentItem';\r\nimport CommentForm from './CommentForm';\r\nimport commentService from '../../services/commentService';\r\nimport './CommentList.css';\r\n\r\nconst CommentList = ({ postId }) => {\r\n  const [comments, setComments] = useState([]);\r\n  const [refreshKey, setRefreshKey] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchComments = async () => {\r\n      try {\r\n        const response = await commentService.getCommentsByPostId(postId);\r\n        // Organize comments into a nested structure\r\n        const rootComments = response.data.filter(comment => !comment.parentId);\r\n        const commentMap = response.data.reduce((map, comment) => {\r\n          map[comment.id] = { ...comment, replies: [] };\r\n          return map;\r\n        }, {});\r\n        \r\n        response.data.forEach(comment => {\r\n          if (comment.parentId) {\r\n            commentMap[comment.parentId].replies.push(commentMap[comment.id]);\r\n          }\r\n        });\r\n        \r\n        setComments(rootComments.map(comment => commentMap[comment.id]));\r\n      } catch (error) {\r\n        console.error('Error fetching comments:', error);\r\n      }\r\n    };\r\n\r\n    fetchComments();\r\n  }, [postId, refreshKey]);\r\n\r\n  const refreshComments = () => {\r\n    setRefreshKey(prevKey => prevKey + 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"comment-section\">\r\n      <h3>Comments</h3>\r\n      <CommentForm postId={postId} onCommentAdded={refreshComments} />\r\n      \r\n      <div className=\"comments-container\">\r\n        {comments.length > 0 ? (\r\n          comments.map(comment => (\r\n            <CommentItem \r\n              key={comment.id} \r\n              comment={comment} \r\n              postId={postId}\r\n              onCommentUpdated={refreshComments}\r\n            />\r\n          ))\r\n        ) : (\r\n          <p className=\"no-comments\">No comments yet. Be the first to comment!</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CommentList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
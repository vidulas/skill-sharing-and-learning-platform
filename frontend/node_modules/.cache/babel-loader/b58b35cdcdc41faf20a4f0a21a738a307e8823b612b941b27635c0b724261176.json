{"ast":null,"code":"var _jsxFileName = \"F:\\\\PAF_new\\\\PAF_SL\\\\skillSharingAndLearningPlatform\\\\frontend\\\\src\\\\components\\\\comments\\\\CommentList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CommentItem from './CommentItem';\nimport CommentForm from './CommentForm';\nimport commentService from '../../services/commentService';\nimport './CommentList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentList = ({\n  postId,\n  onCommentAdded\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [refreshKey, setRefreshKey] = useState(0);\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        setLoading(true);\n        const response = await commentService.getCommentsByPostId(postId);\n        console.log('Comments received:', response.data);\n\n        // Organize comments into a nested structure\n        const rootComments = response.data.filter(comment => !comment.parentId);\n        const commentMap = response.data.reduce((map, comment) => {\n          map[comment.id] = {\n            ...comment,\n            replies: []\n          };\n          return map;\n        }, {});\n        response.data.forEach(comment => {\n          if (comment.parentId && commentMap[comment.parentId]) {\n            commentMap[comment.parentId].replies.push(commentMap[comment.id]);\n          }\n        });\n        const organizedComments = rootComments.map(comment => commentMap[comment.id]);\n        console.log('Organized comments:', organizedComments);\n        setComments(organizedComments);\n        setError(null);\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n        setError('Failed to load comments. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchComments();\n  }, [postId, refreshKey]);\n  const refreshComments = () => {\n    setRefreshKey(prevKey => prevKey + 1);\n    // Call the parent component's callback if provided\n    if (onCommentAdded) {\n      onCommentAdded();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n      postId: postId,\n      onCommentAdded: refreshComments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading comments...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-container\",\n      children: comments.length > 0 ? comments.map(comment => /*#__PURE__*/_jsxDEV(CommentItem, {\n        comment: comment,\n        postId: postId,\n        onCommentUpdated: refreshComments\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-comments\",\n        children: \"No comments yet. Be the first to comment!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentList, \"r0cKF2Fq5x9Wan3BBPgzCpBBBc0=\");\n_c = CommentList;\nexport default CommentList;\nvar _c;\n$RefreshReg$(_c, \"CommentList\");","map":{"version":3,"names":["React","useState","useEffect","CommentItem","CommentForm","commentService","jsxDEV","_jsxDEV","CommentList","postId","onCommentAdded","_s","comments","setComments","loading","setLoading","error","setError","refreshKey","setRefreshKey","fetchComments","response","getCommentsByPostId","console","log","data","rootComments","filter","comment","parentId","commentMap","reduce","map","id","replies","forEach","push","organizedComments","refreshComments","prevKey","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onCommentUpdated","_c","$RefreshReg$"],"sources":["F:/PAF_new/PAF_SL/skillSharingAndLearningPlatform/frontend/src/components/comments/CommentList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport CommentItem from './CommentItem';\r\nimport CommentForm from './CommentForm';\r\nimport commentService from '../../services/commentService';\r\nimport './CommentList.css';\r\n\r\nconst CommentList = ({ postId, onCommentAdded }) => {\r\n  const [comments, setComments] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [refreshKey, setRefreshKey] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchComments = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await commentService.getCommentsByPostId(postId);\r\n        console.log('Comments received:', response.data);\r\n        \r\n        // Organize comments into a nested structure\r\n        const rootComments = response.data.filter(comment => !comment.parentId);\r\n        const commentMap = response.data.reduce((map, comment) => {\r\n          map[comment.id] = { ...comment, replies: [] };\r\n          return map;\r\n        }, {});\r\n        \r\n        response.data.forEach(comment => {\r\n          if (comment.parentId && commentMap[comment.parentId]) {\r\n            commentMap[comment.parentId].replies.push(commentMap[comment.id]);\r\n          }\r\n        });\r\n        \r\n        const organizedComments = rootComments.map(comment => commentMap[comment.id]);\r\n        console.log('Organized comments:', organizedComments);\r\n        setComments(organizedComments);\r\n        setError(null);\r\n      } catch (error) {\r\n        console.error('Error fetching comments:', error);\r\n        setError('Failed to load comments. Please try again.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchComments();\r\n  }, [postId, refreshKey]);\r\n\r\n  const refreshComments = () => {\r\n    setRefreshKey(prevKey => prevKey + 1);\r\n    // Call the parent component's callback if provided\r\n    if (onCommentAdded) {\r\n      onCommentAdded();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"comment-section\">\r\n      <h3>Comments</h3>\r\n      <CommentForm postId={postId} onCommentAdded={refreshComments} />\r\n      \r\n      {loading ? (\r\n        <div>Loading comments...</div>\r\n      ) : error ? (\r\n        <div className=\"error-message\">{error}</div>\r\n      ) : (\r\n        <div className=\"comments-container\">\r\n          {comments.length > 0 ? (\r\n            comments.map(comment => (\r\n              <CommentItem \r\n                key={comment.id} \r\n                comment={comment} \r\n                postId={postId}\r\n                onCommentUpdated={refreshComments}\r\n              />\r\n            ))\r\n          ) : (\r\n            <p className=\"no-comments\">No comments yet. Be the first to comment!</p>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CommentList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,cAAc,MAAM,+BAA+B;AAC1D,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACd,MAAMkB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACFL,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMM,QAAQ,GAAG,MAAMhB,cAAc,CAACiB,mBAAmB,CAACb,MAAM,CAAC;QACjEc,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEH,QAAQ,CAACI,IAAI,CAAC;;QAEhD;QACA,MAAMC,YAAY,GAAGL,QAAQ,CAACI,IAAI,CAACE,MAAM,CAACC,OAAO,IAAI,CAACA,OAAO,CAACC,QAAQ,CAAC;QACvE,MAAMC,UAAU,GAAGT,QAAQ,CAACI,IAAI,CAACM,MAAM,CAAC,CAACC,GAAG,EAAEJ,OAAO,KAAK;UACxDI,GAAG,CAACJ,OAAO,CAACK,EAAE,CAAC,GAAG;YAAE,GAAGL,OAAO;YAAEM,OAAO,EAAE;UAAG,CAAC;UAC7C,OAAOF,GAAG;QACZ,CAAC,EAAE,CAAC,CAAC,CAAC;QAENX,QAAQ,CAACI,IAAI,CAACU,OAAO,CAACP,OAAO,IAAI;UAC/B,IAAIA,OAAO,CAACC,QAAQ,IAAIC,UAAU,CAACF,OAAO,CAACC,QAAQ,CAAC,EAAE;YACpDC,UAAU,CAACF,OAAO,CAACC,QAAQ,CAAC,CAACK,OAAO,CAACE,IAAI,CAACN,UAAU,CAACF,OAAO,CAACK,EAAE,CAAC,CAAC;UACnE;QACF,CAAC,CAAC;QAEF,MAAMI,iBAAiB,GAAGX,YAAY,CAACM,GAAG,CAACJ,OAAO,IAAIE,UAAU,CAACF,OAAO,CAACK,EAAE,CAAC,CAAC;QAC7EV,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEa,iBAAiB,CAAC;QACrDxB,WAAW,CAACwB,iBAAiB,CAAC;QAC9BpB,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdO,OAAO,CAACP,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDC,QAAQ,CAAC,4CAA4C,CAAC;MACxD,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDK,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACX,MAAM,EAAES,UAAU,CAAC,CAAC;EAExB,MAAMoB,eAAe,GAAGA,CAAA,KAAM;IAC5BnB,aAAa,CAACoB,OAAO,IAAIA,OAAO,GAAG,CAAC,CAAC;IACrC;IACA,IAAI7B,cAAc,EAAE;MAClBA,cAAc,CAAC,CAAC;IAClB;EACF,CAAC;EAED,oBACEH,OAAA;IAAKiC,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BlC,OAAA;MAAAkC,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBtC,OAAA,CAACH,WAAW;MAACK,MAAM,EAAEA,MAAO;MAACC,cAAc,EAAE4B;IAAgB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAE/D/B,OAAO,gBACNP,OAAA;MAAAkC,QAAA,EAAK;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,GAC5B7B,KAAK,gBACPT,OAAA;MAAKiC,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAEzB;IAAK;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAE5CtC,OAAA;MAAKiC,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAChC7B,QAAQ,CAACkC,MAAM,GAAG,CAAC,GAClBlC,QAAQ,CAACoB,GAAG,CAACJ,OAAO,iBAClBrB,OAAA,CAACJ,WAAW;QAEVyB,OAAO,EAAEA,OAAQ;QACjBnB,MAAM,EAAEA,MAAO;QACfsC,gBAAgB,EAAET;MAAgB,GAH7BV,OAAO,CAACK,EAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIhB,CACF,CAAC,gBAEFtC,OAAA;QAAGiC,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAAyC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IACxE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAClC,EAAA,CA5EIH,WAAW;AAAAwC,EAAA,GAAXxC,WAAW;AA8EjB,eAAeA,WAAW;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}